interface IOperations {
	cmd_vel ( msg : Twist )
}

interface IEvents {
	event scan : Seq( real )
}

robotic platform TurtleBot3 {
	uses IEvents provides IOperations }

record Twist { linear : Vector3 angular : Vector3 } record Vector3 { x : real y : real z : real } controller MovementController {
	requires IOperations stm MoveForwardThenRotate {
		requires IOperations initial i0
		state MoveForwards {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 1 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = 0 |) |) ) ; # C
		}
		state Rotate {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 0 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = 1.5 |) |) ) ; # C
		}
	transition t0 {
			from i0
			to MoveForwards
		}
		transition t1 {
			from MoveForwards
			to Rotate
			condition since ( C ) >= 5
		}
		transition t2 {
			from Rotate
			to MoveForwards
			condition since ( C ) >= 5
		}
		clock C
	}

}

controller MovementRandomController {
	requires IOperations stm MoveForwardRandomThenRotate {
		requires IOperations var RandomTime : real
		initial i0
		state MoveForwards {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 1 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = 0 |) |) ) ; # C
		}
		state Rotate {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 0 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = 1.5 |) |) ) ; # C
		}
		clock C
	transition t0 {
			from MoveForwards
			to Rotate
			condition since ( C ) >= RandomTime
		}
		transition t1 {
			from Rotate
			to MoveForwards
			condition since ( C ) >= 5
		}
		transition t2 {
			from i0
			to MoveForwards
		}
	}

}

module WeekThree {
	rref rp_ref0 = TurtleBot3
	cref ctrl_ref0 = MovementController
cref ctrl_ref1 = MovementRandomController
}

controller MovementRandomAndIntelligently {
	requires IOperations stm MoveForwardThenRotateIntelligently {
		requires IOperations initial i0
		clock C
	state MoveForward {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 1 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = 0 |) |) ) ; scan ? scanresult ; # C
		}
		state MoveLeft {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 0 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = - 1.5 |) |) ) ; # C
		}
		state MoveRight {
			entry cmd_vel ( Twist (| linear = Vector3 (| x = 0 , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = 1.5 |) |) ) ; # C
		}
		var RandomTime : real
		event scan : Seq( real )
		junction j0
		transition t0 {
			from MoveForward
			to j0
			condition since ( C ) >= RandomTime
		}
		transition t1 {
			from j0
			to MoveRight
		condition scanresult ( 30 ) > scanresult ( 330 )
		}
		var scanresult : Seq( real )
		transition t2 {
			from j0
			to MoveLeft
			condition scanresult ( 30 ) <= scanresult ( 330 )
		}
		transition t3 {
			from i0
			to MoveForward
		}
	transition t4 {
			from MoveLeft
			to MoveForward
			condition since ( C ) >= 5
		}
		transition t5 {
			from MoveRight
			to MoveForward
			condition since ( C ) >= 5
		}
	}

}

