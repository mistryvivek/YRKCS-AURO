package myPackage

interface IOperations {
	cmd_vel (  msg : Twist )
}

interface IEvents {
	event scan : Seq( real )
event odom : Seq( Vector3 )
}

interface ICustomOperations {
	move ( lvel : real , avel : real )

	turn ( angle : real )
}

robotic platform TurtleBot {
	uses IEvents 
	provides IOperations 
}

datatype Twist { 
	linear : Vector3
	angular : Vector3
} 

datatype Vector3 { 
	x : real 
	y : real 
	z : real
} 

controller Driving {
	requires IOperations 
	stm TurtleBot3FSMRC {
		const lvel : real , angle : real
		requires IOperations initial i0
		state DrivingAround {
			initial i0
			state Forward {
				entry move ( lvel , 0 )
			}
			state Turning {
				entry turn ( angle )
			}
			transition t0 {
				from i0
				to Forward
				action # C
			}
			transition t1 {
				from Forward
				to Turning
				condition since ( C ) >= 4
				action # C
			}
			transition t2 {
				from Turning
				to Forward
				condition since ( C ) > 1
				action # C
			}
		}

		transition t1 {
			from IntelligentTurn
			to DrivingAround
		}
		requires ICustomOperations
		clock C

	uses IEvents var scanResult : Seq( real )
		state IntelligentTurn {
			initial i0
			final f0
			state MoveRight {
				entry angle = 45.0
			}
			state MoveLeft {
				entry angle = 315.0
			}
			transition t0 {
				from i0
				to MoveRight
				condition scanResult ( 45 ) >= scanResult ( 315 )
			}
			transition t1 {
				from MoveRight
				to f0
			}
			transition t2 {
				from i0
				to MoveLeft
				condition scanResult ( 45 ) < scanResult ( 315 )
			}
			transition t3 {
				from MoveLeft
				to f0
			}
		}
		junction j0
		transition t0 {
			from i0
			to j0
		}
		transition t2 {
			from j0
			to IntelligentTurn
			trigger scan ? scanResult
		}
		transition t3 {
			from DrivingAround
			to j0
		}
	}

	requires ICustomOperations }

operation move ( lvel : real
, avel : real
) {
	requires IOperations initial i0
	state move {
		entry cmd_vel ( Twist (| linear = Vector3 (| x = lvel , y = 0 , z = 0 |) , angular = Vector3 (| x = 0 , y = 0 , z = avel |) |) )
	}
	final f0
	transition t0 {
		from i0
		to move
	}
	transition t1 {
		from move
		to f0
	}
}

operation turn ( angle : real
) {
	uses IEvents var odomRead : Seq( Vector3 )
	initial i0
	junction j0
	state s0 {
	entry move ( 0 , 0 )
	}
	transition t0 {
		from i0
		to j0
		trigger odom ? odomRead
	}
	transition t1 {
		from j0
		to s0
	condition since ( C ) * odomRead ( 0 ( 2 ) ) >= angle
	}
	clock C
requires ICustomOperations final f0
	transition t2 {
		from s0
		to f0
	}
}

